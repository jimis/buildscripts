#!/bin/sh

. `dirname "$0"`/../build-scripts/functions


# TODO KEEP THE OLD VERSION OF LOCAL CACHE FOR WHOEVER DOES NOT WANT REMOTE CACHE


# Check for Jenkins node label and use that as index.
# There can be multiple labels, pick the first one.
firstlabel=${NODE_LABELS%% *}

if [ x"$firstlabel" = x ]
then
    echo "Jenkins has not assigned a LABEL to this node, you are probably building manually" 1>&2
    firstlabel=NO_LABEL
fi

#CACHEDIR=$HOME/.cache/cfengine-buildscripts-pkgs/$firstlabel
CACHEDIR=cache/$firstlabel
CACHEHOST=cfe_pkgs@138.68.18.72
SFTP="sftp -o GSSAPIAuthentication=no -o PreferredAuthentications=publickey $CACHEHOST  |  grep -v '^sftp>'"

usage()
{
    exec >&2
    echo "$0 find <pkg>-<version>-<release>"
    echo "  looks up package in cache"
    echo
    echo "$0 store <pkg>-<version>-<release> <pkgfile> [<pkgfile> ...]"
    echo "  stores new package in cache. refuses to do that if package already exists"
    echo
    echo "$0 list <pkg>-<version>-<release>"
    echo "  lists cached package files"
    echo
    # echo "$0 prune <pkg>-<version>-<release>"
    # echo "  removes cached package files"
    # echo
    # echo "$0 autoprune <pkg> <n>"
    # echo "  removes all but the <n> most recently used cached package files"
    exit 1
}

opts()
{
    if [ $# -lt 2 ]
    then
        usage
    fi
    CMD="$1"
    shift


    case "$CMD" in

    find|list|store)
        PKGVR="$1"
        shift

        PKGCACHEDIR="$CACHEDIR/$PKGVR"

        case "$CMD" in
            store)
                if [ $# -eq 0 ]
                then
                    usage
                fi
                PKGFILES="$@"
                ;;
            *)
                if [ $# -ne 0 ]
                then
                    usage
                fi
                ;;
        esac
        ;;

    *)  fatal "Unknown command: $CMD"  ;;
    esac
}


opts "$@"



case "$CMD" in
find)
    if [ `find "$PKGCACHEDIR" -type f  |  wc -l`  !=  0 ]
    then
        # Update access time for autoprune.
        touch "$PKGCACHEDIR"
        exit 0
    else
        exit 1
    fi
    ;;
store)
    if [ -d "$PKGCACHEDIR" ]
    then
        echo "pkg-cache store: Skipping storing package because directory already exists:    $PKGCACHEDIR"  1>&2
        exit
    fi

    mkdir -p "$(dirname $PKGCACHEDIR)"
    tempdir=`mktempdir "$PKGCACHEDIR.XXXXXX"`

    cp $PKGFILES "$tempdir"

    # Atomically rename directory, to avoid a very common issue:
    # package directory only containing the "devel" package but not
    # the main one, or vice-versa.
    mv "$tempdir" "$PKGCACHEDIR"
    ;;
list)
    find "$PKGCACHEDIR" -type f  \
        ||  fatal "Failed searching $PKGVR in cache"
    ;;
esac
