#!/bin/sh

. `dirname "$0"`/functions
. detect-environment
. compile-options


# We use packaging scripts
PATH=$PATH:$BASEDIR/buildscripts/deps-packaging

# Not all dependencies support building in parallel.
MAKEFLAGS=-j1

set -x

# This should be already set from sourcing "functions" at the top, but
# make sure, because we don't want build-artifacts-cache to have bogus
# packages.
set -e


install_pkg_files()
{
    retry_wrapper  pkg-install-$DEP_PACKAGING  "$@"
}


# Apply necessary changes for alternate /opt/cfengine prefix
if [ "$BUILDPREFIX" = "/opt/cfengine" ]
then
    sed -i "s:var/cfengine:opt/cfengine:"  \
        $BASEDIR/buildscripts/deps-packaging/*/debian/*.install  \
        $BASEDIR/buildscripts/deps-packaging/*/mingw/debian/*.install \
        $BASEDIR/buildscripts/deps-packaging/apache/httpd.conf \
        $BASEDIR/buildscripts/deps-packaging/apache/httpd-ssl.conf
fi

# Override for manual testing
if [ "x$1" != x ]
then
    DEPS="$@"
fi

output_dir=`mktempdir /tmp/deps.XXXXXX`

for dep in $DEPS
do

    case "$BUILD_TYPE" in
    DEBUG|CODE_COVERAGE)
        optimize=yes
        debugsym=no
        versuffix=+untested
        tests=no;;
    RELEASE)
        optimize=yes
        debugsym=no
        versuffix=+release
        tests=yes;;
    *)
        echo "Unknown build type: $BUILD_TYPE"
        exit 42;;
    esac

    case "$ARCH" in
    x86|x64)
        crossver=+mingw$ARCH
        cross=$ARCH;;
    *)
        crossver=
        cross=native;;
    esac

    revision=$(cat $BASEDIR/buildscripts/deps-packaging/revision)
    version=0+$revision$versuffix$crossver

    # CD into an empty directory
    cd $output_dir
    [ "x`ls`" = x ]  ||  \
        fatal "Cache output directory was not empty: $output_dir: `ls`"

    # FETCH dependency packages
    pkg-cache-sftp get $dep-$version                            # TODO pkg-cache (not SFTP)
    package_files=`ls`

    # If package cache did not have the packages
    if [ x"$package_files" = x ]
    then
        # BUILD the packages
        $BASEDIR/buildscripts/deps-packaging/pkg-build-$DEP_PACKAGING  \
            $dep $tests $cross $optimize $debugsym $version

        package_files=`pkg-find-$DEP_PACKAGING $BASEDIR/$dep`

        [ x"$package_files" = x ]  &&  \
            fatal "Empty output dir after building dependency: $dep"

        # CACHE them
        pkg-cache-sftp store $dep-$version $package_files
    fi

    # INSTALL the packages
    install_pkg_files  $package_files

    # CLEAN UP
    rm -f $package_files
    cd -

done


rmdir $output_dir
